<style>
    body{
    background-color: rgb(0, 17, 0);
    background-image: none;
    font-family: 'DejaVu Sans', sans-serif;
    height: 100vh;
    max-height: 812px;
    overscroll-behavior: contain;
}
.row.row-broken {
    padding-bottom: 0;
}
.col-inside-lg {
    padding-right: 20px;
    padding-left: 20px;
}
.chat {
    height: calc(100vh - 172px);
}
.decor-default {
    background-color: #ffffff;
}
.chat-users h6 {
    font-size: 20px;
    margin: 0 0 20px;
}
.chat-users .user {
    position: relative;
    padding: 0 0 0 50px;
    display: block;
    cursor: pointer;
    margin: 0 0 20px;
}
.chat-users .user .avatar {
    top: 0;
    left: 0;
}
.chat .avatar {
    width: 40px;
    height: 40px;
    position: absolute;
}
.chat .avatar img {
    display: block;
    border-radius: 20px;
    height: 100%;
}
.chat .avatar .status.off {
    border: 1px solid #5a5a5a;
    background: #ffffff;
}
.chat .avatar .status.online {
    background: #4caf50;
}
.chat .avatar .status.busy {
    background: #ffc107;
}
.chat .avatar .status.offline {
    background: #ed4e6e;
}
.chat-users .user .status {
    bottom: 0;
    left: 28px;
}
.chat .avatar .status {
    width: 10px;
    height: 10px;
    border-radius: 5px;
    position: absolute;
}
.chat-users .user .name {
    font-size: 14px;
    font-weight: bold;
    line-height: 20px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}
.chat-users .user .mood {
    font: 200 14px/20px "Raleway", sans-serif;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

/*****************CHAT BODY *******************/
.chat-body h6 {
    font-size: 20px;
    margin: 0 0 20px;
}
.chat-body .answer.left {
    text-align: left;
    float: left;
}
.chat-body .answer {
    position: relative;
    max-width: 600px;
    overflow: hidden;
    clear: both;
}
.chat-body .answer.left .avatar {
    left: 0;
}
.chat-body .answer .avatar {
    bottom: 15px;
}
.chat .avatar {
    width: 40px;
    height: 40px;
    position: absolute;
}
.chat .avatar img {
    display: block;
    border-radius: 20px;
    height: 100%;
}
.chat-body .answer .name {
    font-size: 14px;
    line-height: 36px;
    color: #AADEAD;
    margin-top: 10px;
}
.chat-body .answer .span-msg {
    font-size: 14px;
    line-height: 36px;
    margin-top: 10px;
}
.chat-body .answer.left .avatar .status {
    right: 4px;
}
.chat-body .answer .avatar .status {
    bottom: 0;
}
.chat-body .answer.left .text {
    color: #00BB00;
    border-radius: 8px 8px 8px 0;
}
.chat-body .answer .text {
    padding-top: 5px;
    padding-bottom: 5px;
    padding-left: 1px;
    font-size: 15px;
    line-height: 15px;
}
.chat-body .answer.left .text:before {
    left: -30px;
    border-right-width: 12px;
}
.chat-body .answer .text:before {
    content: '';
    display: block;
    position: absolute;
    bottom: 0;
    border: 18px solid transparent;
    border-bottom-width: 0;
}
.chat-body .answer.left .time {
    padding-left: 12px;
    color: #333333;
}
.chat-body .answer .time {
    font-size: 16px;
    line-height: 36px;
    position: relative;
    padding-bottom: 1px;
}
/*RIGHT*/
.chat-body .answer.right {
    padding: 0 58px 0 0;
    text-align: right;
    float: right;
}

.chat-body .answer.right .avatar {
    right: 0;
}
.chat-body .answer.right .avatar .status {
    left: 4px;
}
.chat-body .answer.right .text {
    background: #7266ba;
    color: #ffffff;
    border-radius: 8px 8px 0 8px;
}
.chat-body .answer.right .text:before {
    right: -30px;
    border-left-color: #7266ba;
    border-left-width: 12px;
}
.chat-body .answer.right .time {
    padding-right: 12px;
    color: #333333;
}

/**************ADD FORM ***************/
.chat-body .answer-add {
    clear: both;
    position: relative;
    margin: 20px -20px -20px;
    padding: 20px;
    background: #46be8a;
}
.chat-body .answer-add input {
    border: none;
    background: none;
    display: block;
    width: 100%;
    font-size: 16px;
    line-height: 20px;
    padding: 0;
    color: #ffffff;
}
.chat input {
    -webkit-appearance: none;
    border-radius: 0;
}
.chat-body .answer-add .answer-btn-1 {
    background: url("http://91.234.35.26/iwiki-admin/v1.0.0/admin/img/icon-40.png") 50% 50% no-repeat;
    right: 56px;
}
.chat-body .answer-add .answer-btn {
    display: block;
    cursor: pointer;
    width: 36px;
    height: 36px;
    position: absolute;
    top: 50%;
    margin-top: -18px;
}
.chat input::-webkit-input-placeholder {
   color: #fff;
}

.chat input:-moz-placeholder { /* Firefox 18- */
   color: #fff;  
}

.chat input::-moz-placeholder {  /* Firefox 19+ */
   color: #fff;  
}

.chat input:-ms-input-placeholder {  
   color: #fff;  
}
.chat input {
    -webkit-appearance: none;
    border-radius: 0;
}
.answer-add {
    position: fixed;
    height: 78px;
    bottom: 0;
    left: 64px;
    right: 64px;
}
.back-ground-page {
    background-color: rgb(0, 17, 0);
    color: #ffffff;
}
#chat-form {
    border-top: 1px solid green;
    border-left: 1px solid green;
    border-right: 1px solid green;
}
#chatMes {
    padding: 14px 25px;
    caret-color: #00BB00;
}
.spacer-other {
    height: 19px;
}
.fallback {
    font-size: 12px;
    padding-left: 18px;
}
.error-message {
    background-color: rgb(0, 17, 0);
    color: red;
}
</style>

<title>Kênh chat TP1
</title>
<link rel="stylesheet" href="/bower_components/dejavu-sans/css/dejavu-sans.css">
<link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css" rel="stylesheet">
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.1/jquery.min.js"
    integrity="sha512-aVKKRRi/Q/YV+4mjoKBsE4x3H+BkegoM/em46NNlCqNTmUYADjBbeNefNxYV7giUp0VxICtqdrbqU7iVaeZNXA=="
    crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.nicescroll/3.6.6/jquery.nicescroll.min.js"></script>
<script type="text/javascript"
    src="https://cdn.jsdelivr.net/npm/jquery-validation@1.19.1/dist/jquery.validate.js"></script>
<div class="container" style="position: relative;">
    <div class="content container-fluid bootstrap snippets bootdey">
        <div class="row">
            <div class="col-sm-12 col-xs-12">
                <div class="back-ground-page decor-default" style="overflow: hidden; outline: none;">
                    <div class="ps-3 chat-users text-center">
                        <h5>Online</h5> 
                        <span id="user-online"></span>
                    </div>
                </div>
            </div>
        </div>
        <div class="row row-broken">
            <div class="col-sm-12 col-xs-12 chat" style="overflow: hidden; outline: none;" id="table-messages" tabindex="5001">
                <div class="col-inside-lg decor-default">
                    <div class="chat-body">
                        <div class="inbox__messages">
                            <div class="messages__history"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        {{!-- <div class="spacer-other"> --}}
        </div>
        <div class="answer-add">
            <div>
                <div class="d-inline-block fallback isTyping back-ground-page"></div>
                <div id="error-message" class="fallback d-inline-block error-message"></div>
            </div>
            <form id="chat-form" autocomplete="off">
                <input class="back-ground-page" type="text" name="chatMes" id="chatMes" style="caret-shape: block;display:table-cell; width:100%">
                <span class="answer-btn answer-btn-1"></span>
                <span class="answer-btn answer-btn-2"></span>
            </form>
        </div>
    </div>
</div>

    {{!-- Script --}}
    <script src="/socket.io/socket.io.js"></script>
    <script>
    // Validate and handle send message
        $().ready(function () {

                //Khi bàn phím được nhấn và thả ra thì sẽ chạy phương thức này
                $("#chat-form").validate({
                    rules: {
                        chatMes: {
                            required: true,
                            maxlength: 35
                        },
                    },
                    messages: {
                        chatMes: {
                            required: "tối thiểu 1 kí tự",
                            maxlength: "tối đa 35 kí tự"
                        },
                    },
                    errorLabelContainer: '#error-message',
                    submitHandler: function (form) {
                        socket.emit("sendMessage", inputField.value);
                        inputField.value = "";
                    }
            });
        });

        // Scroll
        $(function () {
            $(".chat").niceScroll({
                cursordragontouch: true
            });
        }); 

        const socket = io();
        let userName = prompt('Tên muốn được người khác gọi:');
        const inboxPeople = document.querySelector(".inbox__people");
        const inputField = document.querySelector("#chatMes");
        const messageForm = document.querySelector("#chat-form");
        const messageBox = document.querySelector(".messages__history");
        const fallback = document.querySelector(".isTyping");
        const elem = document.getElementById('table-messages');
        const specialName = ['admin', 'Admin', 'ADMIN','bot006', 'bot005', 'bot004', 'bot003', 'bot002', 'bot001', 'bot000', 'bot00', 'bot007', 'bot008', 'bot009', 'admin007', 'admin006', 'admin005', 'admin004', 'admin003', 'admin002', 'admin001', 'admin00', 'admin000', 'admin008', 'admin009', 'anhvin', 'anh vin', 'Anhvin', 'Anh Vin', 'anh Vin', 'ANHVIN', 'Anh Vin', 'ANH VIN',];
        let checkName = false;
        while(checkName === false) {
            let check = true;
            for(let i = 0; i < specialName.length; i++) {
                if(userName === specialName[i]) {
                    checkName = false;
                    check = false;
                    break;
                };
            }
            if(check) checkName = true;
            else userName = prompt('Không có quyền đặt tên này, vui lòng đặt tên khác: ')
        }
        if(userName === null || userName === '') userName = 'Nobody';
        const {name, room} = {name: userName, room: '779'}

        socket.emit('join', {name, room}, (error) => {
            if (error) {
                alert(error);
                location.reload();
            }
        })


    // Scroll to new message
    const scrollToNewMessage = function () {
        elem.scrollTop = elem.scrollHeight;
    };


    // render status
    const addNewStatusMessage = ({ userName, statusUser}) => {
            const receivedMsg =  `
        <div class="answer left">
            <span class="name" style="color: #ff0a47">${userName}</span>
            <span class="name" style="color: #ff36e6">>> </span>
            <p class="text" style="display: inline-block; color: #AE81FF;">
                    ${statusUser}
            </p>
        </div>`;

            messageBox.innerHTML += receivedMsg;
            scrollToNewMessage();
        };

    // render message
    const addNewMessage = ({ user, message }) => {

        const receivedMsg = `
        <div class="answer left">
            <span class="name" style="color: #66D9EF">${user}</span>
            <span class="name">>> </span>
            <p class="text" style="display: inline-block;">
                    ${message}
            </p>
        </div>`;

        messageBox.innerHTML += receivedMsg;
        scrollToNewMessage();
    };

     // Handle user typing
    inputField.addEventListener("keyup", () => {
            socket.emit("typing", {
                isTyping: inputField.value.length > 0,
                nick: userName,
            });
        });

    // render status new user
    socket.on("messageStatus", function (data, countUser) {
        document.querySelector('#user-online').textContent = countUser;
        addNewStatusMessage({userName: data.user, statusUser: data.text});
    });

    // render message
    socket.on("message", function (data) {
        addNewMessage({ user: data.user, message: data.text });
    });

    // render typing
    socket.on("typing", function (data) {
            const { isTyping, nick } = data;

            if (!isTyping) {
                fallback.innerHTML = "";
                return;
            }

            fallback.innerHTML = `<p>${nick} đang nhập...</p>`;
        });


</script>
